---
# Source: homework/charts/mysql/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: homework-mysql
  namespace: "homework"
  labels:
    app.kubernetes.io/instance: homework
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: homework
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mysql
      app.kubernetes.io/version: 8.4.2
      helm.sh/chart: mysql-11.1.17
  policyTypes:
    - Ingress
    - Egress
  egress:
    - {}
  ingress:
    # Allow connection from other cluster pods
    - ports:
        - port: 3306
---
# Source: homework/charts/mysql/templates/primary/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: homework-mysql
  namespace: "homework"
  labels:
    app.kubernetes.io/instance: homework
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
    app.kubernetes.io/component: primary
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: homework
      app.kubernetes.io/name: mysql
      app.kubernetes.io/component: primary
---
# Source: homework/charts/mysql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: homework-mysql
  namespace: "homework"
  labels:
    app.kubernetes.io/instance: homework
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
automountServiceAccountToken: false
secrets:
  - name: homework-mysql
---
# Source: homework/charts/mysql/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: homework-mysql
  namespace: "homework"
  labels:
    app.kubernetes.io/instance: homework
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
type: Opaque
data:
  mysql-root-password: "RmFTVEVEdm1uaA=="
  mysql-password: "aXZPZXZFOGpRNQ=="
---
# Source: homework/charts/mysql/templates/primary/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: homework-mysql
  namespace: "homework"
  labels:
    app.kubernetes.io/instance: homework
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
    app.kubernetes.io/component: primary
data:
  my.cnf: |-
    [mysqld]
    authentication_policy='* ,,'
    skip-name-resolve
    explicit_defaults_for_timestamp
    basedir=/opt/bitnami/mysql
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    port=3306
    mysqlx=0
    mysqlx_port=33060
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    datadir=/bitnami/mysql/data
    tmpdir=/opt/bitnami/mysql/tmp
    max_allowed_packet=16M
    bind-address=*
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
    log-error=/opt/bitnami/mysql/logs/mysqld.log
    character-set-server=UTF8
    slow_query_log=0
    long_query_time=10.0
    
    [client]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    default-character-set=UTF8
    plugin_dir=/opt/bitnami/mysql/lib/plugin
    
    [manager]
    port=3306
    socket=/opt/bitnami/mysql/tmp/mysql.sock
    pid-file=/opt/bitnami/mysql/tmp/mysqld.pid
---
# Source: homework/templates/cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: homework-my-configmap
  namespace: homework
  labels:
    les: kubernetes-intro
data:
  nginx_conf: |
    events {}
    http {
      server {
          # define error page
          error_page 404 = /err404.html;
          error_page 500 = /err500.html;
          
          listen 8000;

          location / {
            #autoindex on;
            root /homework;
            try_files $uri $uri/index.html =404;
          }

          location /conf/file {
            alias /homework/conf/file/;
          }
      }
    }
  index_html: |
    fio: MinkovAV
    city: Ufa
    age: 41
---
# Source: homework/templates/storageClass.yaml
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: homework-storage
  namespace: homework
provisioner: kubernetes.io/no-provisioner
reclaimPolicy: Retain
volumeBindingMode: Immediate
---
# Source: homework/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolume
metadata:
  name: homework-my-pv
spec:
  storageClassName: "homework-storage"
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /mnt/homework-storage
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: homework
              operator: In
              values:
                - "true"
---
# Source: homework/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: homework-my-pvc
  namespace: homework
spec:
  storageClassName: "homework-storage"
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Source: homework/charts/mysql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: homework-mysql-headless
  namespace: "homework"
  labels:
    app.kubernetes.io/instance: homework
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  selector:
    app.kubernetes.io/instance: homework
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: primary
---
# Source: homework/charts/mysql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: homework-mysql
  namespace: "homework"
  labels:
    app.kubernetes.io/instance: homework
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      protocol: TCP
      targetPort: mysql
      nodePort: null
  selector:
    app.kubernetes.io/instance: homework
    app.kubernetes.io/name: mysql
    app.kubernetes.io/component: primary
---
# Source: homework/templates/ingress-controller-load-balancer.yaml
apiVersion: v1
kind: Service
metadata:
  name: ingress-nginx-controller-loadbalancer
  namespace: ingress-nginx
#  namespace: homework
spec:
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
  type: LoadBalancer
---
# Source: homework/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: srv-mypod
  namespace: homework
  labels:
    run: web-server
spec:
  type: ClusterIP
  selector:
    run: web-server
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
---
# Source: homework/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mypod-deployment
  labels:
    app: nginx
  namespace: homework
spec:
  replicas: 3
  selector:
    matchLabels:
      run: web-server
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        run: web-server
    spec:
      nodeSelector:
        homework: "true"
      serviceAccountName: monitoring
      volumes:
      - name: shared-volume
        persistentVolumeClaim:
          claimName: homework-my-pvc
      - name: homework-my-configmap
        configMap:
          name: homework-my-configmap
          items:
            - key: nginx_conf
              path: nginx.conf
            - key: index_html
              path: index.html
      initContainers:
        - name: init-container
          image: busybox
          command:
            - /bin/sh
            - -c
            - |
              d=$(date +'%Y-%m-%d %H:%M:%S')
              echo "<html><body><h1>My pod in k3s<br> Created: $d<br> hostname: $(hostname)<br>  </h1></body></html>" >> /init/index.html
              echo "<html><body><h1> ERROR 404  </h1></body></html>" > /init/err404.html
              echo "<html><body><h1> ERROR 500  </h1></body></html>" > /init/err500.html
              wget kube-state-metrics.kube-system:8080/metrics -O /init/metrics.html
          volumeMounts:
            - name: shared-volume
              mountPath: /init
      containers:
        - name: web-server
          image: "nginx:alpine"
          ports:
            - containerPort: 8000
          readinessProbe:
            exec:
              command: ["test", "-f", "/homework/index.html"]
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - name: shared-volume
              mountPath: /homework
            - name: homework-my-configmap
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: homework-my-configmap
              mountPath: /homework/conf/file/index.html
              subPath: index.html
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "rm -f /homework/index.html"]
          resources:
            requests:
              memory: "200Mi"
              cpu: "250m"
            limits:
              memory: "400Mi"
              cpu: "500m"
---
# Source: homework/charts/mysql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: homework-mysql
  namespace: "homework"
  labels:
    app.kubernetes.io/instance: homework
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mysql
    app.kubernetes.io/version: 8.4.2
    helm.sh/chart: mysql-11.1.17
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  podManagementPolicy: ""
  selector:
    matchLabels:
      app.kubernetes.io/instance: homework
      app.kubernetes.io/name: mysql
      app.kubernetes.io/component: primary
  serviceName: homework-mysql
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configuration: 7e8410e6f87d3a5b941c5704962c4d4afae54993daa6633755dd274b122448fd
      labels:
        app.kubernetes.io/instance: homework
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mysql
        app.kubernetes.io/version: 8.4.2
        helm.sh/chart: mysql-11.1.17
        app.kubernetes.io/component: primary
    spec:
      serviceAccountName: homework-mysql
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: homework
                    app.kubernetes.io/name: mysql
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/mysql:8.4.2-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/mysql/logs; then
                cp -r /opt/bitnami/mysql/logs /emptydir/app-logs-dir
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: mysql
          image: docker.io/bitnami/mysql:8.4.2-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: homework-mysql
                  key: mysql-root-password
            - name: MYSQL_PORT
              value: "3306"
            - name: MYSQL_DATABASE
              value: "my_database"
          envFrom:
          ports:
            - name: mysql
              containerPort: 3306
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin status -uroot -p"${password_aux}"
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
          startupProbe:
            failureThreshold: 10
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
            exec:
              command:
                - /bin/bash
                - -ec
                - |
                  password_aux="${MYSQL_ROOT_PASSWORD:-}"
                  if [[ -f "${MYSQL_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MYSQL_ROOT_PASSWORD_FILE")
                  fi
                  mysqladmin ping -uroot -p"${password_aux}" | grep "mysqld is alive"
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          volumeMounts:
            - name: data
              mountPath: /bitnami/mysql
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mysql/logs
              subPath: app-logs-dir
            - name: config
              mountPath: /opt/bitnami/mysql/conf/my.cnf
              subPath: my.cnf
      volumes:
        - name: config
          configMap:
            name: homework-mysql
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/instance: homework
          app.kubernetes.io/name: mysql
          app.kubernetes.io/component: primary
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: homework/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mypod-nginx-ingress
  namespace: homework
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/use-regex: "true"
#    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
  - host: "homework.otus"
    http:
      paths:
        - path: /homepage
          pathType: ImplementationSpecific
          backend:
            service:
              name: srv-mypod
              port:
                number: 80
        - path: /
          pathType: Prefix
          backend:
            service:
              name: srv-mypod
              port:
                number: 80
---
# Source: homework/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "homework-test-connection"
  labels:
    helm.sh/chart: homework-0.0.1
    app.kubernetes.io/name: homework
    app.kubernetes.io/instance: homework
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['homework:80']
  restartPolicy: Never
